<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="565.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="45305"><g><title>ntdll`LdrGetDllHandleByMapping (5 samples, 0.01%)</title><rect x="0.0088%" y="405" width="0.0110%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="5"/><text x="0.2588%" y="415.50"></text></g><g><title>ntdll`LdrAddRefDll (5 samples, 0.01%)</title><rect x="0.0088%" y="389" width="0.0110%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="5"/><text x="0.2588%" y="399.50"></text></g><g><title>ntdll`LdrControlFlowGuardEnforced (5 samples, 0.01%)</title><rect x="0.0088%" y="373" width="0.0110%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="5"/><text x="0.2588%" y="383.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (6 samples, 0.01%)</title><rect x="0.0199%" y="389" width="0.0132%" height="15" fill="rgb(248,212,6)" fg:x="9" fg:w="6"/><text x="0.2699%" y="399.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (6 samples, 0.01%)</title><rect x="0.0199%" y="373" width="0.0132%" height="15" fill="rgb(208,68,35)" fg:x="9" fg:w="6"/><text x="0.2699%" y="383.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (6 samples, 0.01%)</title><rect x="0.0199%" y="357" width="0.0132%" height="15" fill="rgb(232,128,0)" fg:x="9" fg:w="6"/><text x="0.2699%" y="367.50"></text></g><g><title>ntdll`RtlActivateActivationContextUnsafeFast (6 samples, 0.01%)</title><rect x="0.0199%" y="341" width="0.0132%" height="15" fill="rgb(207,160,47)" fg:x="9" fg:w="6"/><text x="0.2699%" y="351.50"></text></g><g><title>KERNELBASE`GetProcessHeap (6 samples, 0.01%)</title><rect x="0.0199%" y="325" width="0.0132%" height="15" fill="rgb(228,23,34)" fg:x="9" fg:w="6"/><text x="0.2699%" y="335.50"></text></g><g><title>ntdll`LdrLoadDll (12 samples, 0.03%)</title><rect x="0.0088%" y="453" width="0.0265%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="12"/><text x="0.2588%" y="463.50"></text></g><g><title>ntdll`RtlUnicodeToCustomCPN (12 samples, 0.03%)</title><rect x="0.0088%" y="437" width="0.0265%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="12"/><text x="0.2588%" y="447.50"></text></g><g><title>ntdll`RtlImageRvaToSection (12 samples, 0.03%)</title><rect x="0.0088%" y="421" width="0.0265%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="12"/><text x="0.2588%" y="431.50"></text></g><g><title>ntdll`RtlCopyUnicodeString (7 samples, 0.02%)</title><rect x="0.0199%" y="405" width="0.0155%" height="15" fill="rgb(240,193,28)" fg:x="9" fg:w="7"/><text x="0.2699%" y="415.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (7 samples, 0.02%)</title><rect x="0.0397%" y="453" width="0.0155%" height="15" fill="rgb(216,20,37)" fg:x="18" fg:w="7"/><text x="0.2897%" y="463.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (7 samples, 0.02%)</title><rect x="0.0397%" y="437" width="0.0155%" height="15" fill="rgb(206,188,39)" fg:x="18" fg:w="7"/><text x="0.2897%" y="447.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (7 samples, 0.02%)</title><rect x="0.0397%" y="421" width="0.0155%" height="15" fill="rgb(217,207,13)" fg:x="18" fg:w="7"/><text x="0.2897%" y="431.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (7 samples, 0.02%)</title><rect x="0.0596%" y="453" width="0.0155%" height="15" fill="rgb(231,73,38)" fg:x="27" fg:w="7"/><text x="0.3096%" y="463.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (7 samples, 0.02%)</title><rect x="0.0596%" y="437" width="0.0155%" height="15" fill="rgb(225,20,46)" fg:x="27" fg:w="7"/><text x="0.3096%" y="447.50"></text></g><g><title>ntdll`RtlAnsiStringToUnicodeString (7 samples, 0.02%)</title><rect x="0.0596%" y="421" width="0.0155%" height="15" fill="rgb(210,31,41)" fg:x="27" fg:w="7"/><text x="0.3096%" y="431.50"></text></g><g><title>ntdll`LdrAddRefDll (7 samples, 0.02%)</title><rect x="0.0596%" y="405" width="0.0155%" height="15" fill="rgb(221,200,47)" fg:x="27" fg:w="7"/><text x="0.3096%" y="415.50"></text></g><g><title>ntdll`LdrControlFlowGuardEnforced (7 samples, 0.02%)</title><rect x="0.0596%" y="389" width="0.0155%" height="15" fill="rgb(226,26,5)" fg:x="27" fg:w="7"/><text x="0.3096%" y="399.50"></text></g><g><title>ntdll`LdrInitializeThunk (37 samples, 0.08%)</title><rect x="0.0000%" y="517" width="0.0817%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="37"/><text x="0.2500%" y="527.50"></text></g><g><title>ntdll`LdrInitializeThunk (37 samples, 0.08%)</title><rect x="0.0000%" y="501" width="0.0817%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="37"/><text x="0.2500%" y="511.50"></text></g><g><title>ntdll`EtwLogTraceEvent (37 samples, 0.08%)</title><rect x="0.0000%" y="485" width="0.0817%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="37"/><text x="0.2500%" y="495.50"></text></g><g><title>ntdll`EtwLogTraceEvent (37 samples, 0.08%)</title><rect x="0.0000%" y="469" width="0.0817%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="37"/><text x="0.2500%" y="479.50"></text></g><g><title>case3-9180c99637496113`alloc::vec::impl$28::drop (6 samples, 0.01%)</title><rect x="0.0949%" y="309" width="0.0132%" height="15" fill="rgb(241,131,45)" fg:x="43" fg:w="6"/><text x="0.3449%" y="319.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (11 samples, 0.02%)</title><rect x="0.1236%" y="213" width="0.0243%" height="15" fill="rgb(249,31,29)" fg:x="56" fg:w="11"/><text x="0.3736%" y="223.50"></text></g><g><title>case3-9180c99637496113`hashbrown::raw::impl$17::drop&lt;tuple$ (14 samples, 0.03%)</title><rect x="0.1192%" y="245" width="0.0309%" height="15" fill="rgb(225,111,53)" fg:x="54" fg:w="14"/><text x="0.3692%" y="255.50"></text></g><g><title>ntdll`RtlFreeHeap (12 samples, 0.03%)</title><rect x="0.1236%" y="229" width="0.0265%" height="15" fill="rgb(238,160,17)" fg:x="56" fg:w="12"/><text x="0.3736%" y="239.50"></text></g><g><title>case3-9180c99637496113`core::ptr::drop_in_place (16 samples, 0.04%)</title><rect x="0.1192%" y="261" width="0.0353%" height="15" fill="rgb(214,148,48)" fg:x="54" fg:w="16"/><text x="0.3692%" y="271.50"></text></g><g><title>case3-9180c99637496113`alloc::sync::Arc&lt;mhr_calculator::data::armor::BaseArmor&gt;::drop_slow (19 samples, 0.04%)</title><rect x="0.1192%" y="277" width="0.0419%" height="15" fill="rgb(232,36,49)" fg:x="54" fg:w="19"/><text x="0.3692%" y="287.50"></text></g><g><title>case3-9180c99637496113`alloc::sync::Arc&lt;mhr_calculator::calc::calc_equipment::CalcEquipment&gt;::drop_slow (24 samples, 0.05%)</title><rect x="0.1126%" y="293" width="0.0530%" height="15" fill="rgb(209,103,24)" fg:x="51" fg:w="24"/><text x="0.3626%" y="303.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (59 samples, 0.13%)</title><rect x="0.2075%" y="229" width="0.1302%" height="15" fill="rgb(229,88,8)" fg:x="94" fg:w="59"/><text x="0.4575%" y="239.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (6 samples, 0.01%)</title><rect x="0.4150%" y="101" width="0.0132%" height="15" fill="rgb(213,181,19)" fg:x="188" fg:w="6"/><text x="0.6650%" y="111.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (6 samples, 0.01%)</title><rect x="0.4150%" y="85" width="0.0132%" height="15" fill="rgb(254,191,54)" fg:x="188" fg:w="6"/><text x="0.6650%" y="95.50"></text></g><g><title>ntdll`ZwFreeVirtualMemory (6 samples, 0.01%)</title><rect x="0.4150%" y="69" width="0.0132%" height="15" fill="rgb(241,83,37)" fg:x="188" fg:w="6"/><text x="0.6650%" y="79.50"></text></g><g><title>ntdll`RtlFreeHeap (8 samples, 0.02%)</title><rect x="0.4128%" y="181" width="0.0177%" height="15" fill="rgb(233,36,39)" fg:x="187" fg:w="8"/><text x="0.6628%" y="191.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (8 samples, 0.02%)</title><rect x="0.4128%" y="165" width="0.0177%" height="15" fill="rgb(226,3,54)" fg:x="187" fg:w="8"/><text x="0.6628%" y="175.50"></text></g><g><title>ntdll`RtlDeleteBoundaryDescriptor (8 samples, 0.02%)</title><rect x="0.4128%" y="149" width="0.0177%" height="15" fill="rgb(245,192,40)" fg:x="187" fg:w="8"/><text x="0.6628%" y="159.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (8 samples, 0.02%)</title><rect x="0.4128%" y="133" width="0.0177%" height="15" fill="rgb(238,167,29)" fg:x="187" fg:w="8"/><text x="0.6628%" y="143.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (7 samples, 0.02%)</title><rect x="0.4150%" y="117" width="0.0155%" height="15" fill="rgb(232,182,51)" fg:x="188" fg:w="7"/><text x="0.6650%" y="127.50"></text></g><g><title>case3-9180c99637496113`hashbrown::raw::impl$17::drop&lt;tuple$ (122 samples, 0.27%)</title><rect x="0.1655%" y="261" width="0.2693%" height="15" fill="rgb(231,60,39)" fg:x="75" fg:w="122"/><text x="0.4155%" y="271.50"></text></g><g><title>ntdll`RtlFreeHeap (107 samples, 0.24%)</title><rect x="0.1987%" y="245" width="0.2362%" height="15" fill="rgb(208,69,12)" fg:x="90" fg:w="107"/><text x="0.4487%" y="255.50"></text></g><g><title>ntdll`RtlMoveMemory (44 samples, 0.10%)</title><rect x="0.3377%" y="229" width="0.0971%" height="15" fill="rgb(235,93,37)" fg:x="153" fg:w="44"/><text x="0.5877%" y="239.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (10 samples, 0.02%)</title><rect x="0.4128%" y="213" width="0.0221%" height="15" fill="rgb(213,116,39)" fg:x="187" fg:w="10"/><text x="0.6628%" y="223.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (10 samples, 0.02%)</title><rect x="0.4128%" y="197" width="0.0221%" height="15" fill="rgb(222,207,29)" fg:x="187" fg:w="10"/><text x="0.6628%" y="207.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (7 samples, 0.02%)</title><rect x="0.4392%" y="245" width="0.0155%" height="15" fill="rgb(206,96,30)" fg:x="199" fg:w="7"/><text x="0.6892%" y="255.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (9 samples, 0.02%)</title><rect x="0.4635%" y="117" width="0.0199%" height="15" fill="rgb(218,138,4)" fg:x="210" fg:w="9"/><text x="0.7135%" y="127.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (9 samples, 0.02%)</title><rect x="0.4635%" y="101" width="0.0199%" height="15" fill="rgb(250,191,14)" fg:x="210" fg:w="9"/><text x="0.7135%" y="111.50"></text></g><g><title>ntdll`ZwFreeVirtualMemory (9 samples, 0.02%)</title><rect x="0.4635%" y="85" width="0.0199%" height="15" fill="rgb(239,60,40)" fg:x="210" fg:w="9"/><text x="0.7135%" y="95.50"></text></g><g><title>ntdll`RtlFreeHeap (11 samples, 0.02%)</title><rect x="0.4635%" y="197" width="0.0243%" height="15" fill="rgb(206,27,48)" fg:x="210" fg:w="11"/><text x="0.7135%" y="207.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (11 samples, 0.02%)</title><rect x="0.4635%" y="181" width="0.0243%" height="15" fill="rgb(225,35,8)" fg:x="210" fg:w="11"/><text x="0.7135%" y="191.50"></text></g><g><title>ntdll`RtlDeleteBoundaryDescriptor (11 samples, 0.02%)</title><rect x="0.4635%" y="165" width="0.0243%" height="15" fill="rgb(250,213,24)" fg:x="210" fg:w="11"/><text x="0.7135%" y="175.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (11 samples, 0.02%)</title><rect x="0.4635%" y="149" width="0.0243%" height="15" fill="rgb(247,123,22)" fg:x="210" fg:w="11"/><text x="0.7135%" y="159.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (11 samples, 0.02%)</title><rect x="0.4635%" y="133" width="0.0243%" height="15" fill="rgb(231,138,38)" fg:x="210" fg:w="11"/><text x="0.7135%" y="143.50"></text></g><g><title>case3-9180c99637496113`alloc::vec::impl$28::drop (147 samples, 0.32%)</title><rect x="0.1655%" y="277" width="0.3245%" height="15" fill="rgb(231,145,46)" fg:x="75" fg:w="147"/><text x="0.4155%" y="287.50"></text></g><g><title>ntdll`RtlFreeHeap (24 samples, 0.05%)</title><rect x="0.4370%" y="261" width="0.0530%" height="15" fill="rgb(251,118,11)" fg:x="198" fg:w="24"/><text x="0.6870%" y="271.50"></text></g><g><title>ntdll`RtlMoveMemory (16 samples, 0.04%)</title><rect x="0.4547%" y="245" width="0.0353%" height="15" fill="rgb(217,147,25)" fg:x="206" fg:w="16"/><text x="0.7047%" y="255.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (12 samples, 0.03%)</title><rect x="0.4635%" y="229" width="0.0265%" height="15" fill="rgb(247,81,37)" fg:x="210" fg:w="12"/><text x="0.7135%" y="239.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (12 samples, 0.03%)</title><rect x="0.4635%" y="213" width="0.0265%" height="15" fill="rgb(209,12,38)" fg:x="210" fg:w="12"/><text x="0.7135%" y="223.50"></text></g><g><title>case3-9180c99637496113`core::ptr::drop_in_place (10 samples, 0.02%)</title><rect x="0.4900%" y="277" width="0.0221%" height="15" fill="rgb(227,1,9)" fg:x="222" fg:w="10"/><text x="0.7400%" y="287.50"></text></g><g><title>case3-9180c99637496113`hashbrown::raw::impl$17::drop&lt;tuple$&lt;alloc::vec::Vec&lt;tuple$&lt;usize,i8&gt;,alloc::alloc::Global&gt;,alloc::sync::Arc&lt;alloc::vec::Vec (10 samples, 0.02%)</title><rect x="0.4900%" y="261" width="0.0221%" height="15" fill="rgb(248,47,43)" fg:x="222" fg:w="10"/><text x="0.7400%" y="271.50"></text></g><g><title>case3-9180c99637496113`alloc::sync::Arc&lt;alloc::vec::Vec&lt;mhr_calculator::calc::deco_combination::DecorationCombination,alloc::alloc::Global&gt; &gt;::drop_slow&lt;alloc::vec::Vec (10 samples, 0.02%)</title><rect x="0.4900%" y="245" width="0.0221%" height="15" fill="rgb(221,10,30)" fg:x="222" fg:w="10"/><text x="0.7400%" y="255.50"></text></g><g><title>ntdll`RtlFreeHeap (10 samples, 0.02%)</title><rect x="0.4900%" y="229" width="0.0221%" height="15" fill="rgb(210,229,1)" fg:x="222" fg:w="10"/><text x="0.7400%" y="239.50"></text></g><g><title>ntdll`RtlMoveMemory (7 samples, 0.02%)</title><rect x="0.4966%" y="213" width="0.0155%" height="15" fill="rgb(222,148,37)" fg:x="225" fg:w="7"/><text x="0.7466%" y="223.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (16 samples, 0.04%)</title><rect x="0.5209%" y="245" width="0.0353%" height="15" fill="rgb(234,67,33)" fg:x="236" fg:w="16"/><text x="0.7709%" y="255.50"></text></g><g><title>case3-9180c99637496113`hashbrown::raw::impl$17::drop&lt;tuple$ (25 samples, 0.06%)</title><rect x="0.5121%" y="277" width="0.0552%" height="15" fill="rgb(247,98,35)" fg:x="232" fg:w="25"/><text x="0.7621%" y="287.50"></text></g><g><title>ntdll`RtlFreeHeap (21 samples, 0.05%)</title><rect x="0.5209%" y="261" width="0.0464%" height="15" fill="rgb(247,138,52)" fg:x="236" fg:w="21"/><text x="0.7709%" y="271.50"></text></g><g><title>ntdll`RtlMoveMemory (5 samples, 0.01%)</title><rect x="0.5562%" y="245" width="0.0110%" height="15" fill="rgb(213,79,30)" fg:x="252" fg:w="5"/><text x="0.8062%" y="255.50"></text></g><g><title>case3-9180c99637496113`core::ptr::drop_in_place (190 samples, 0.42%)</title><rect x="0.1655%" y="293" width="0.4194%" height="15" fill="rgb(246,177,23)" fg:x="75" fg:w="190"/><text x="0.4155%" y="303.50"></text></g><g><title>case3-9180c99637496113`core::ptr::drop_in_place (221 samples, 0.49%)</title><rect x="0.1082%" y="309" width="0.4878%" height="15" fill="rgb(230,62,27)" fg:x="49" fg:w="221"/><text x="0.3582%" y="319.50"></text></g><g><title>VCRUNTIME140`memcpy (251 samples, 0.55%)</title><rect x="3.8340%" y="293" width="0.5540%" height="15" fill="rgb(216,154,8)" fg:x="1737" fg:w="251"/><text x="4.0840%" y="303.50"></text></g><g><title>case3-9180c99637496113`hashbrown::map::impl$97::extend&lt;alloc::string::String,alloc::vec::Vec&lt;i8,alloc::alloc::Global&gt;,std::collections::hash::map::RandomState,alloc::alloc::Global,core::iter::adapters::filter_map::FilterMap&lt;std::collections::hash::map::Iter&lt;usize,nalgebra::base::matrix::Matrix&lt;i8,nalgebra::base::dimension::Const&lt;4&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage (12 samples, 0.03%)</title><rect x="4.3902%" y="229" width="0.0265%" height="15" fill="rgb(244,35,45)" fg:x="1989" fg:w="12"/><text x="4.6402%" y="239.50"></text></g><g><title>case3-9180c99637496113`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,alloc::vec::Vec&lt;i8,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt;::insert&lt;tuple$&lt;alloc::string::String,alloc::vec::Vec&lt;i8,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;alloc::string::String,alloc::string::String,alloc::vec::Vec (7 samples, 0.02%)</title><rect x="4.4013%" y="213" width="0.0155%" height="15" fill="rgb(251,115,12)" fg:x="1994" fg:w="7"/><text x="4.6513%" y="223.50"></text></g><g><title>case3-9180c99637496113`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,alloc::vec::Vec&lt;i8,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;alloc::string::String,alloc::vec::Vec&lt;i8,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;alloc::string::String,alloc::string::String,alloc::vec::Vec (6 samples, 0.01%)</title><rect x="4.4035%" y="197" width="0.0132%" height="15" fill="rgb(240,54,50)" fg:x="1995" fg:w="6"/><text x="4.6535%" y="207.50"></text></g><g><title>case3-9180c99637496113`mhr_calculator::calc::deco_combination::DecorationCombination::get_skill_decos (7 samples, 0.02%)</title><rect x="4.4234%" y="229" width="0.0155%" height="15" fill="rgb(233,84,52)" fg:x="2004" fg:w="7"/><text x="4.6734%" y="239.50"></text></g><g><title>case3-9180c99637496113`alloc::vec::spec_from_iter::impl$0::from_iter&lt;mhr_calculator::ResultDecorationCombination,core::iter::adapters::map::Map&lt;core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;mhr_calculator::calc::deco_combination::DecorationCombination&gt;,core::slice::iter::Iter (24 samples, 0.05%)</title><rect x="4.3880%" y="261" width="0.0530%" height="15" fill="rgb(207,117,47)" fg:x="1988" fg:w="24"/><text x="4.6380%" y="271.50"></text></g><g><title>case3-9180c99637496113`core::iter::adapters::map::impl$2::fold&lt;mhr_calculator::ResultDecorationCombination,core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;mhr_calculator::calc::deco_combination::DecorationCombination&gt;,core::slice::iter::Iter&lt;mhr_calculator::calc::skills::SkillsContainer&gt; &gt;,mhr_calculator::generate_result::closure$0::closure_env$1,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;mhr_calculator::ResultDecorationCombination,alloc::vec::spec_extend::impl$1::spec_extend::closure_env$0&lt;mhr_calculator::ResultDecorationCombination,core::iter::adapters::map::Map&lt;core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;mhr_calculator::calc::deco_combination::DecorationCombination&gt;,core::slice::iter::Iter (24 samples, 0.05%)</title><rect x="4.3880%" y="245" width="0.0530%" height="15" fill="rgb(249,43,39)" fg:x="1988" fg:w="24"/><text x="4.6380%" y="255.50"></text></g><g><title>case3-9180c99637496113`hashbrown::map::impl$97::extend&lt;alloc::string::String,mhr_calculator::ResultArmor,std::collections::hash::map::RandomState,alloc::alloc::Global,core::iter::adapters::filter_map::FilterMap&lt;core::slice::iter::Iter&lt;ref$&lt;alloc::sync::Arc (8 samples, 0.02%)</title><rect x="4.4432%" y="261" width="0.0177%" height="15" fill="rgb(209,38,44)" fg:x="2013" fg:w="8"/><text x="4.6932%" y="271.50"></text></g><g><title>case3-9180c99637496113`alloc::vec::spec_from_iter::impl$0::from_iter&lt;mhr_calculator::ResultFullEquipments,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;tuple$&lt;array$&lt;ref$&lt;alloc::sync::Arc&lt;mhr_calculator::calc::calc_equipment::CalcEquipment&gt; &gt;,6&gt;,alloc::vec::Vec&lt;mhr_calculator::calc::deco_combination::DecorationCombination,alloc::alloc::Global&gt;,alloc::vec::Vec (34 samples, 0.08%)</title><rect x="4.3880%" y="293" width="0.0750%" height="15" fill="rgb(236,212,23)" fg:x="1988" fg:w="34"/><text x="4.6380%" y="303.50"></text></g><g><title>case3-9180c99637496113`core::iter::adapters::map::impl$2::fold&lt;mhr_calculator::ResultFullEquipments,core::slice::iter::Iter&lt;tuple$&lt;array$&lt;ref$&lt;alloc::sync::Arc&lt;mhr_calculator::calc::calc_equipment::CalcEquipment&gt; &gt;,6&gt;,alloc::vec::Vec&lt;mhr_calculator::calc::deco_combination::DecorationCombination,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;mhr_calculator::calc::skills::SkillsContainer,alloc::alloc::Global&gt; &gt; &gt;,mhr_calculator::generate_result::closure_env$0,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;mhr_calculator::ResultFullEquipments,alloc::vec::spec_extend::impl$1::spec_extend::closure_env$0&lt;mhr_calculator::ResultFullEquipments,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;tuple$&lt;array$&lt;ref$&lt;alloc::sync::Arc&lt;mhr_calculator::calc::calc_equipment::CalcEquipment&gt; &gt;,6&gt;,alloc::vec::Vec&lt;mhr_calculator::calc::deco_combination::DecorationCombination,alloc::alloc::Global&gt;,alloc::vec::Vec (34 samples, 0.08%)</title><rect x="4.3880%" y="277" width="0.0750%" height="15" fill="rgb(242,79,21)" fg:x="1988" fg:w="34"/><text x="4.6380%" y="287.50"></text></g><g><title>case3-9180c99637496113`core::array::impl$23::map&lt;usize,6,mhr_calculator::calc::calc_data_manager::impl$0::get_full_equipments::closure_env$0,ref$&lt;alloc::sync::Arc (369 samples, 0.81%)</title><rect x="4.4675%" y="293" width="0.8145%" height="15" fill="rgb(211,96,35)" fg:x="2024" fg:w="369"/><text x="4.7175%" y="303.50"></text></g><g><title>case3-9180c99637496113`core::hash::BuildHasher::hash_one&lt;std::collections::hash::map::RandomState,ref$ (1,652 samples, 3.65%)</title><rect x="5.2820%" y="293" width="3.6464%" height="15" fill="rgb(253,215,40)" fg:x="2393" fg:w="1652"/><text x="5.5320%" y="303.50">case..</text></g><g><title>case3-9180c99637496113`core::hash::sip::impl$5::write (550 samples, 1.21%)</title><rect x="7.7144%" y="277" width="1.2140%" height="15" fill="rgb(211,81,21)" fg:x="3495" fg:w="550"/><text x="7.9644%" y="287.50"></text></g><g><title>case3-9180c99637496113`memcpy (10 samples, 0.02%)</title><rect x="8.9372%" y="293" width="0.0221%" height="15" fill="rgb(208,190,38)" fg:x="4049" fg:w="10"/><text x="9.1872%" y="303.50"></text></g><g><title>case3-9180c99637496113`mhr_calculator::calc::calc_data_manager::CalcDataManager::remove_le_equipments (142 samples, 0.31%)</title><rect x="8.9637%" y="277" width="0.3134%" height="15" fill="rgb(235,213,38)" fg:x="4061" fg:w="142"/><text x="9.2137%" y="287.50"></text></g><g><title>case3-9180c99637496113`mhr_calculator::calc::calc_equipment::CalcEquipment::is_le (117 samples, 0.26%)</title><rect x="9.0189%" y="261" width="0.2582%" height="15" fill="rgb(237,122,38)" fg:x="4086" fg:w="117"/><text x="9.2689%" y="271.50"></text></g><g><title>VCRUNTIME140`memcpy (9 samples, 0.02%)</title><rect x="9.2573%" y="245" width="0.0199%" height="15" fill="rgb(244,218,35)" fg:x="4194" fg:w="9"/><text x="9.5073%" y="255.50"></text></g><g><title>case3-9180c99637496113`mhr_calculator::calc::calc_data_manager::CalcDataManager::get_all_equipments (147 samples, 0.32%)</title><rect x="8.9593%" y="293" width="0.3245%" height="15" fill="rgb(240,68,47)" fg:x="4059" fg:w="147"/><text x="9.2093%" y="303.50"></text></g><g><title>case3-9180c99637496113`mhr_calculator::calc::calc_data_manager::CalcDataManager::get_possible_general_part_equips (20 samples, 0.04%)</title><rect x="9.2860%" y="293" width="0.0441%" height="15" fill="rgb(210,16,53)" fg:x="4207" fg:w="20"/><text x="9.5360%" y="303.50"></text></g><g><title>case3-9180c99637496113`mhr_calculator::calc::calc_data_manager::CalcDataManager::get_ge_equipments (20 samples, 0.04%)</title><rect x="9.2860%" y="277" width="0.0441%" height="15" fill="rgb(235,124,12)" fg:x="4207" fg:w="20"/><text x="9.5360%" y="287.50"></text></g><g><title>case3-9180c99637496113`mhr_calculator::calc::calc_equipment::CalcEquipment::is_le (9 samples, 0.02%)</title><rect x="9.3102%" y="261" width="0.0199%" height="15" fill="rgb(224,169,11)" fg:x="4218" fg:w="9"/><text x="9.5602%" y="271.50"></text></g><g><title>case3-9180c99637496113`alloc::raw_vec::RawVec&lt;f64,alloc::alloc::Global&gt;::reserve_for_push (5 samples, 0.01%)</title><rect x="9.3455%" y="277" width="0.0110%" height="15" fill="rgb(250,166,2)" fg:x="4234" fg:w="5"/><text x="9.5955%" y="287.50"></text></g><g><title>case3-9180c99637496113`alloc::raw_vec::finish_grow (5 samples, 0.01%)</title><rect x="9.3455%" y="261" width="0.0110%" height="15" fill="rgb(242,216,29)" fg:x="4234" fg:w="5"/><text x="9.5955%" y="271.50"></text></g><g><title>case3-9180c99637496113`mhr_calculator::calc::calc_equips_iterator::CalcEquipmentsIterator::new (14 samples, 0.03%)</title><rect x="9.3345%" y="293" width="0.0309%" height="15" fill="rgb(230,116,27)" fg:x="4229" fg:w="14"/><text x="9.5845%" y="303.50"></text></g><g><title>case3-9180c99637496113`mhr_calculator::calc::calc_equips_iterator::CalcEquipmentsIterator::promote (33 samples, 0.07%)</title><rect x="24.2711%" y="277" width="0.0728%" height="15" fill="rgb(228,99,48)" fg:x="10996" fg:w="33"/><text x="24.5211%" y="287.50"></text></g><g><title>case3-9180c99637496113`mhr_calculator::calc::calc_equips_iterator::CalcEquipmentsIterator::proceed (6,787 samples, 14.98%)</title><rect x="9.3654%" y="293" width="14.9807%" height="15" fill="rgb(253,11,6)" fg:x="4243" fg:w="6787"/><text x="9.6154%" y="303.50">case3-9180c99637496113`..</text></g><g><title>ntdll`RtlAllocateHeap (6 samples, 0.01%)</title><rect x="24.4035%" y="213" width="0.0132%" height="15" fill="rgb(247,143,39)" fg:x="11056" fg:w="6"/><text x="24.6535%" y="223.50"></text></g><g><title>case3-9180c99637496113`hashbrown::raw::impl$12::clone&lt;tuple$&lt;usize,nalgebra::base::matrix::Matrix&lt;i8,nalgebra::base::dimension::Const&lt;4&gt;,nalgebra::base::dimension::Const&lt;1&gt;,nalgebra::base::array_storage::ArrayStorage (12 samples, 0.03%)</title><rect x="24.3925%" y="261" width="0.0265%" height="15" fill="rgb(236,97,10)" fg:x="11051" fg:w="12"/><text x="24.6425%" y="271.50"></text></g><g><title>ntdll`RtlAllocateHeap (10 samples, 0.02%)</title><rect x="24.3969%" y="245" width="0.0221%" height="15" fill="rgb(233,208,19)" fg:x="11053" fg:w="10"/><text x="24.6469%" y="255.50"></text></g><g><title>ntdll`RtlAllocateHeap (10 samples, 0.02%)</title><rect x="24.3969%" y="229" width="0.0221%" height="15" fill="rgb(216,164,2)" fg:x="11053" fg:w="10"/><text x="24.6469%" y="239.50"></text></g><g><title>case3-9180c99637496113`mhr_calculator::calc::deco_combination::DecorationCombinations::get_full_possible_combs (26 samples, 0.06%)</title><rect x="24.3660%" y="277" width="0.0574%" height="15" fill="rgb(220,129,5)" fg:x="11039" fg:w="26"/><text x="24.6160%" y="287.50"></text></g><g><title>case3-9180c99637496113`mhr_calculator::calculate_full_equip (39 samples, 0.09%)</title><rect x="24.3461%" y="293" width="0.0861%" height="15" fill="rgb(242,17,10)" fg:x="11030" fg:w="39"/><text x="24.5961%" y="303.50"></text></g><g><title>VCRUNTIME140`memcpy (316 samples, 0.70%)</title><rect x="30.5463%" y="277" width="0.6975%" height="15" fill="rgb(242,107,0)" fg:x="13839" fg:w="316"/><text x="30.7963%" y="287.50"></text></g><g><title>VCRUNTIME140`memcpy (2,673 samples, 5.90%)</title><rect x="40.9160%" y="261" width="5.9000%" height="15" fill="rgb(251,28,31)" fg:x="18537" fg:w="2673"/><text x="41.1660%" y="271.50">VCRUNTIM..</text></g><g><title>case3-9180c99637496113`memcpy (15 samples, 0.03%)</title><rect x="46.8160%" y="261" width="0.0331%" height="15" fill="rgb(233,223,10)" fg:x="21210" fg:w="15"/><text x="47.0660%" y="271.50"></text></g><g><title>case3-9180c99637496113`mhr_calculator::calc::calc_point::CalcPoint::is_possible_static (334 samples, 0.74%)</title><rect x="46.8491%" y="261" width="0.7372%" height="15" fill="rgb(215,21,27)" fg:x="21225" fg:w="334"/><text x="47.0991%" y="271.50"></text></g><g><title>case3-9180c99637496113`mhr_calculator::calc::calc_data_manager::CalcDataManager::check_equipment_point (12,942 samples, 28.57%)</title><rect x="31.2504%" y="277" width="28.5664%" height="15" fill="rgb(232,23,21)" fg:x="14158" fg:w="12942"/><text x="31.5004%" y="287.50">case3-9180c99637496113`mhr_calculator::calc::c..</text></g><g><title>case3-9180c99637496113`mhr_calculator::data::data_manager::DataManager::calc_req_skill_point_slots_lp_by_uids (5,541 samples, 12.23%)</title><rect x="47.5864%" y="261" width="12.2304%" height="15" fill="rgb(244,5,23)" fg:x="21559" fg:w="5541"/><text x="47.8364%" y="271.50">case3-9180c9963749..</text></g><g><title>case3-9180c99637496113`mhr_calculator::calc::calc_point::CalcPoint::is_possible_static (62 samples, 0.14%)</title><rect x="59.8168%" y="277" width="0.1369%" height="15" fill="rgb(226,81,46)" fg:x="27100" fg:w="62"/><text x="60.0668%" y="287.50"></text></g><g><title>case3-9180c99637496113`mhr_calculator::calc::deco_combination::DecorationCombination::is_possible_static_lp_equip_mut (852 samples, 1.88%)</title><rect x="59.9536%" y="277" width="1.8806%" height="15" fill="rgb(247,70,30)" fg:x="27162" fg:w="852"/><text x="60.2036%" y="287.50">c..</text></g><g><title>case3-9180c99637496113`mhr_calculator::check_static_conditions (19,559 samples, 43.17%)</title><rect x="24.4322%" y="293" width="43.1718%" height="15" fill="rgb(212,68,19)" fg:x="11069" fg:w="19559"/><text x="24.6822%" y="303.50">case3-9180c99637496113`mhr_calculator::check_static_conditions</text></g><g><title>case3-9180c99637496113`mhr_calculator::data::data_manager::DataManager::calc_req_skill_point_slots_lp (2,614 samples, 5.77%)</title><rect x="61.8342%" y="277" width="5.7698%" height="15" fill="rgb(240,187,13)" fg:x="28014" fg:w="2614"/><text x="62.0842%" y="287.50">case3-9..</text></g><g><title>KERNEL32`HeapFree (8 samples, 0.02%)</title><rect x="79.4747%" y="261" width="0.0177%" height="15" fill="rgb(223,113,26)" fg:x="36006" fg:w="8"/><text x="79.7247%" y="271.50"></text></g><g><title>VCRUNTIME140`memcpy (9 samples, 0.02%)</title><rect x="79.4923%" y="261" width="0.0199%" height="15" fill="rgb(206,192,2)" fg:x="36014" fg:w="9"/><text x="79.7423%" y="271.50"></text></g><g><title>VCRUNTIME140`memset (873 samples, 1.93%)</title><rect x="79.5122%" y="261" width="1.9269%" height="15" fill="rgb(241,108,4)" fg:x="36023" fg:w="873"/><text x="79.7622%" y="271.50">V..</text></g><g><title>case3-9180c99637496113`std::alloc::__default_lib_allocator::__rdl_alloc (10 samples, 0.02%)</title><rect x="81.4391%" y="261" width="0.0221%" height="15" fill="rgb(247,173,49)" fg:x="36896" fg:w="10"/><text x="81.6891%" y="271.50"></text></g><g><title>case3-9180c99637496113`std::alloc::__default_lib_allocator::__rdl_dealloc (15 samples, 0.03%)</title><rect x="81.4612%" y="261" width="0.0331%" height="15" fill="rgb(224,114,35)" fg:x="36906" fg:w="15"/><text x="81.7112%" y="271.50"></text></g><g><title>ntdll`RtlAllocateHeap (11 samples, 0.02%)</title><rect x="82.2183%" y="229" width="0.0243%" height="15" fill="rgb(245,159,27)" fg:x="37249" fg:w="11"/><text x="82.4683%" y="239.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (23 samples, 0.05%)</title><rect x="82.2514%" y="229" width="0.0508%" height="15" fill="rgb(245,172,44)" fg:x="37264" fg:w="23"/><text x="82.5014%" y="239.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (11 samples, 0.02%)</title><rect x="82.2779%" y="213" width="0.0243%" height="15" fill="rgb(236,23,11)" fg:x="37276" fg:w="11"/><text x="82.5279%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (442 samples, 0.98%)</title><rect x="81.4943%" y="261" width="0.9756%" height="15" fill="rgb(205,117,38)" fg:x="36921" fg:w="442"/><text x="81.7443%" y="271.50"></text></g><g><title>ntdll`RtlAllocateHeap (348 samples, 0.77%)</title><rect x="81.7018%" y="245" width="0.7681%" height="15" fill="rgb(237,72,25)" fg:x="37015" fg:w="348"/><text x="81.9518%" y="255.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (76 samples, 0.17%)</title><rect x="82.3022%" y="229" width="0.1678%" height="15" fill="rgb(244,70,9)" fg:x="37287" fg:w="76"/><text x="82.5522%" y="239.50"></text></g><g><title>ntdll`RtlDeleteBoundaryDescriptor (52 samples, 0.11%)</title><rect x="82.6024%" y="229" width="0.1148%" height="15" fill="rgb(217,125,39)" fg:x="37423" fg:w="52"/><text x="82.8524%" y="239.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (29 samples, 0.06%)</title><rect x="82.6531%" y="213" width="0.0640%" height="15" fill="rgb(235,36,10)" fg:x="37446" fg:w="29"/><text x="82.9031%" y="223.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (24 samples, 0.05%)</title><rect x="82.6642%" y="197" width="0.0530%" height="15" fill="rgb(251,123,47)" fg:x="37451" fg:w="24"/><text x="82.9142%" y="207.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (15 samples, 0.03%)</title><rect x="82.6840%" y="181" width="0.0331%" height="15" fill="rgb(221,13,13)" fg:x="37460" fg:w="15"/><text x="82.9340%" y="191.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (8 samples, 0.02%)</title><rect x="82.6995%" y="165" width="0.0177%" height="15" fill="rgb(238,131,9)" fg:x="37467" fg:w="8"/><text x="82.9495%" y="175.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (86 samples, 0.19%)</title><rect x="82.5339%" y="245" width="0.1898%" height="15" fill="rgb(211,50,8)" fg:x="37392" fg:w="86"/><text x="82.7839%" y="255.50"></text></g><g><title>case3-9180c99637496113`mhr_calculator::calc::deco_combination::DecorationCombinations::get_possible_combs_lp (5,277 samples, 11.65%)</title><rect x="71.2990%" y="277" width="11.6477%" height="15" fill="rgb(245,182,24)" fg:x="32302" fg:w="5277"/><text x="71.5490%" y="287.50">case3-9180c996374..</text></g><g><title>ntdll`RtlFreeHeap (216 samples, 0.48%)</title><rect x="82.4699%" y="261" width="0.4768%" height="15" fill="rgb(242,14,37)" fg:x="37363" fg:w="216"/><text x="82.7199%" y="271.50"></text></g><g><title>ntdll`RtlMoveMemory (101 samples, 0.22%)</title><rect x="82.7238%" y="245" width="0.2229%" height="15" fill="rgb(246,228,12)" fg:x="37478" fg:w="101"/><text x="82.9738%" y="255.50"></text></g><g><title>case3-9180c99637496113`mhr_calculator::data::data_manager::DataManager::check_possible_deco_combs_lp (9,743 samples, 21.51%)</title><rect x="67.6040%" y="293" width="21.5054%" height="15" fill="rgb(213,55,15)" fg:x="30628" fg:w="9743"/><text x="67.8540%" y="303.50">case3-9180c99637496113`mhr_calcula..</text></g><g><title>case3-9180c99637496113`mhr_calculator::calc::deco_combination::DecorationCombinations::get_possible_deco_combs_sum (2,792 samples, 6.16%)</title><rect x="82.9467%" y="277" width="6.1627%" height="15" fill="rgb(209,9,3)" fg:x="37579" fg:w="2792"/><text x="83.1967%" y="287.50">case3-91..</text></g><g><title>case3-9180c99637496113`mhr_calculator::full_equipments::FullEquipments::get_full_equip_id (2,970 samples, 6.56%)</title><rect x="89.1094%" y="293" width="6.5556%" height="15" fill="rgb(230,59,30)" fg:x="40371" fg:w="2970"/><text x="89.3594%" y="303.50">case3-918..</text></g><g><title>ntdll`RtlAcquireSRWLockShared (926 samples, 2.04%)</title><rect x="95.6649%" y="293" width="2.0439%" height="15" fill="rgb(209,121,21)" fg:x="43341" fg:w="926"/><text x="95.9149%" y="303.50">n..</text></g><g><title>case3-9180c99637496113`criterion::bencher::Bencher&lt;criterion::measurement::WallTime&gt;::iter&lt;criterion::measurement::WallTime,tuple$ (44,740 samples, 98.75%)</title><rect x="0.0949%" y="325" width="98.7529%" height="15" fill="rgb(220,109,13)" fg:x="43" fg:w="44740"/><text x="0.3449%" y="335.50">case3-9180c99637496113`criterion::bencher::Bencher&lt;criterion::measurement::WallTime&gt;::iter&lt;criterion::measurement::WallTime,tuple$</text></g><g><title>case3-9180c99637496113`mhr_calculator::calculate_skillset (44,512 samples, 98.25%)</title><rect x="0.5982%" y="309" width="98.2496%" height="15" fill="rgb(232,18,1)" fg:x="271" fg:w="44512"/><text x="0.8482%" y="319.50">case3-9180c99637496113`mhr_calculator::calculate_skillset</text></g><g><title>ntdll`RtlReleaseSRWLockShared (515 samples, 1.14%)</title><rect x="97.7111%" y="293" width="1.1367%" height="15" fill="rgb(215,41,42)" fg:x="44268" fg:w="515"/><text x="97.9611%" y="303.50"></text></g><g><title>case3-9180c99637496113`mhr_calculator::calc::calc_equipment::CalcEquipment::new_original_armor (7 samples, 0.02%)</title><rect x="98.8611%" y="309" width="0.0155%" height="15" fill="rgb(224,123,36)" fg:x="44789" fg:w="7"/><text x="99.1111%" y="319.50"></text></g><g><title>case3-9180c99637496113`mhr_calculator::calc::calc_data_manager::CalcDataManager::load_base_armors (13 samples, 0.03%)</title><rect x="98.8522%" y="325" width="0.0287%" height="15" fill="rgb(240,125,3)" fg:x="44785" fg:w="13"/><text x="99.1022%" y="335.50"></text></g><g><title>case3-9180c99637496113`mhr_calculator::data::data_manager::DataManager::set_anomalies (7 samples, 0.02%)</title><rect x="98.8964%" y="325" width="0.0155%" height="15" fill="rgb(205,98,50)" fg:x="44805" fg:w="7"/><text x="99.1464%" y="335.50"></text></g><g><title>case3-9180c99637496113`mhr_calculator::data::parser::parse_anomaly (5 samples, 0.01%)</title><rect x="98.9140%" y="325" width="0.0110%" height="15" fill="rgb(205,185,37)" fg:x="44813" fg:w="5"/><text x="99.1640%" y="335.50"></text></g><g><title>case3-9180c99637496113`core::iter::adapters::map::impl$2::fold&lt;tuple$&lt;alloc::string::String,mhr_calculator::data::armor::BaseArmor&gt;,alloc::vec::into_iter::IntoIter&lt;mhr_calculator::data::armor::BaseArmor,alloc::alloc::Global&gt;,mhr_calculator::data::data_manager::impl$0::from_sources::async_fn$0::async_block$0::closure_env$0,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;tuple$&lt;alloc::string::String,mhr_calculator::data::armor::BaseArmor&gt;,hashbrown::map::impl$97::extend::closure_env$0&lt;alloc::string::String,mhr_calculator::data::armor::BaseArmor,std::collections::hash::map::RandomState,alloc::alloc::Global,core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter (5 samples, 0.01%)</title><rect x="98.9405%" y="213" width="0.0110%" height="15" fill="rgb(238,207,15)" fg:x="44825" fg:w="5"/><text x="99.1905%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (5 samples, 0.01%)</title><rect x="99.0089%" y="53" width="0.0110%" height="15" fill="rgb(213,199,42)" fg:x="44856" fg:w="5"/><text x="99.2589%" y="63.50"></text></g><g><title>ntdll`RtlAllocateHeap (5 samples, 0.01%)</title><rect x="99.0089%" y="37" width="0.0110%" height="15" fill="rgb(235,201,11)" fg:x="44856" fg:w="5"/><text x="99.2589%" y="47.50"></text></g><g><title>case3-9180c99637496113`hashbrown::map::HashMap&lt;mhr_calculator::data::Language,alloc::string::String,std::collections::hash::map::RandomState,alloc::alloc::Global&gt;::insert (13 samples, 0.03%)</title><rect x="98.9935%" y="101" width="0.0287%" height="15" fill="rgb(207,46,11)" fg:x="44849" fg:w="13"/><text x="99.2435%" y="111.50"></text></g><g><title>case3-9180c99637496113`hashbrown::raw::RawTable&lt;tuple$&lt;mhr_calculator::data::Language,alloc::string::String&gt;,alloc::alloc::Global&gt;::insert&lt;tuple$&lt;mhr_calculator::data::Language,alloc::string::String&gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0 (12 samples, 0.03%)</title><rect x="98.9957%" y="85" width="0.0265%" height="15" fill="rgb(241,35,35)" fg:x="44850" fg:w="12"/><text x="99.2457%" y="95.50"></text></g><g><title>case3-9180c99637496113`hashbrown::raw::RawTable&lt;tuple$&lt;mhr_calculator::data::Language,alloc::string::String&gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;mhr_calculator::data::Language,alloc::string::String&gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0 (12 samples, 0.03%)</title><rect x="98.9957%" y="69" width="0.0265%" height="15" fill="rgb(243,32,47)" fg:x="44850" fg:w="12"/><text x="99.2457%" y="79.50"></text></g><g><title>case3-9180c99637496113`mhr_calculator::data::_::impl$0::deserialize&lt;serde_json::de::MapKey&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader (6 samples, 0.01%)</title><rect x="99.0222%" y="101" width="0.0132%" height="15" fill="rgb(247,202,23)" fg:x="44862" fg:w="6"/><text x="99.2722%" y="111.50"></text></g><g><title>case3-9180c99637496113`serde::de::impl$5::deserialize&lt;mhr_calculator::data::_::impl$0::deserialize::__Field,ref_mut$&lt;serde_json::de::Deserializer&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader (6 samples, 0.01%)</title><rect x="99.0222%" y="85" width="0.0132%" height="15" fill="rgb(219,102,11)" fg:x="44862" fg:w="6"/><text x="99.2722%" y="95.50"></text></g><g><title>case3-9180c99637496113`serde_json::read::impl$4::parse_str&lt;std::io::buffered::bufreader::BufReader (5 samples, 0.01%)</title><rect x="99.0244%" y="69" width="0.0110%" height="15" fill="rgb(243,110,44)" fg:x="44863" fg:w="5"/><text x="99.2744%" y="79.50"></text></g><g><title>case3-9180c99637496113`serde_json::de::impl$11::next_key_seed&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt; &gt;,core::marker::PhantomData (7 samples, 0.02%)</title><rect x="99.0354%" y="101" width="0.0155%" height="15" fill="rgb(222,74,54)" fg:x="44868" fg:w="7"/><text x="99.2854%" y="111.50"></text></g><g><title>case3-9180c99637496113`serde_json::read::impl$4::parse_str&lt;std::io::buffered::bufreader::BufReader (27 samples, 0.06%)</title><rect x="99.0575%" y="85" width="0.0596%" height="15" fill="rgb(216,99,12)" fg:x="44878" fg:w="27"/><text x="99.3075%" y="95.50"></text></g><g><title>case3-9180c99637496113`std::io::impl$20::next&lt;std::io::buffered::bufreader::BufReader (9 samples, 0.02%)</title><rect x="99.0972%" y="69" width="0.0199%" height="15" fill="rgb(226,22,26)" fg:x="44896" fg:w="9"/><text x="99.3472%" y="79.50"></text></g><g><title>case3-9180c99637496113`serde_json::de::impl$7::deserialize_string&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader (43 samples, 0.09%)</title><rect x="99.0509%" y="101" width="0.0949%" height="15" fill="rgb(217,163,10)" fg:x="44875" fg:w="43"/><text x="99.3009%" y="111.50"></text></g><g><title>ntdll`RtlAllocateHeap (10 samples, 0.02%)</title><rect x="99.1237%" y="85" width="0.0221%" height="15" fill="rgb(213,25,53)" fg:x="44908" fg:w="10"/><text x="99.3737%" y="95.50"></text></g><g><title>ntdll`RtlAllocateHeap (10 samples, 0.02%)</title><rect x="99.1237%" y="69" width="0.0221%" height="15" fill="rgb(252,105,26)" fg:x="44908" fg:w="10"/><text x="99.3737%" y="79.50"></text></g><g><title>case3-9180c99637496113`serde_json::de::impl$7::deserialize_struct&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader (7 samples, 0.02%)</title><rect x="99.1458%" y="101" width="0.0155%" height="15" fill="rgb(220,39,43)" fg:x="44918" fg:w="7"/><text x="99.3958%" y="111.50"></text></g><g><title>case3-9180c99637496113`serde_json::de::impl$7::deserialize_map&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt; &gt;,serde::de::impls::impl$188::deserialize::MapVisitor (95 samples, 0.21%)</title><rect x="98.9714%" y="117" width="0.2097%" height="15" fill="rgb(229,68,48)" fg:x="44839" fg:w="95"/><text x="99.2214%" y="127.50"></text></g><g><title>case3-9180c99637496113`std::io::impl$20::next&lt;std::io::buffered::bufreader::BufReader (9 samples, 0.02%)</title><rect x="99.1612%" y="101" width="0.0199%" height="15" fill="rgb(252,8,32)" fg:x="44925" fg:w="9"/><text x="99.4112%" y="111.50"></text></g><g><title>case3-9180c99637496113`serde_json::read::impl$4::parse_str&lt;std::io::buffered::bufreader::BufReader (5 samples, 0.01%)</title><rect x="99.2098%" y="101" width="0.0110%" height="15" fill="rgb(223,20,43)" fg:x="44947" fg:w="5"/><text x="99.4598%" y="111.50"></text></g><g><title>case3-9180c99637496113`serde_json::de::impl$7::deserialize_struct&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader (16 samples, 0.04%)</title><rect x="99.1966%" y="117" width="0.0353%" height="15" fill="rgb(229,81,49)" fg:x="44941" fg:w="16"/><text x="99.4466%" y="127.50"></text></g><g><title>case3-9180c99637496113`std::io::impl$20::next&lt;std::io::buffered::bufreader::BufReader (5 samples, 0.01%)</title><rect x="99.2208%" y="101" width="0.0110%" height="15" fill="rgb(236,28,36)" fg:x="44952" fg:w="5"/><text x="99.4708%" y="111.50"></text></g><g><title>case3-9180c99637496113`serde_json::read::impl$4::parse_str&lt;std::io::buffered::bufreader::BufReader (5 samples, 0.01%)</title><rect x="99.2319%" y="117" width="0.0110%" height="15" fill="rgb(249,185,26)" fg:x="44957" fg:w="5"/><text x="99.4819%" y="127.50"></text></g><g><title>case3-9180c99637496113`serde_json::de::from_reader&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;,alloc::vec::Vec (136 samples, 0.30%)</title><rect x="98.9560%" y="197" width="0.3002%" height="15" fill="rgb(249,174,33)" fg:x="44832" fg:w="136"/><text x="99.2060%" y="207.50"></text></g><g><title>case3-9180c99637496113`serde_json::de::impl$7::deserialize_seq&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt; &gt;,serde::de::impls::impl$19::deserialize::VecVisitor (136 samples, 0.30%)</title><rect x="98.9560%" y="181" width="0.3002%" height="15" fill="rgb(233,201,37)" fg:x="44832" fg:w="136"/><text x="99.2060%" y="191.50"></text></g><g><title>case3-9180c99637496113`serde::de::impls::impl$19::deserialize::impl$0::visit_seq&lt;mhr_calculator::data::armor::BaseArmor,serde_json::de::SeqAccess&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader (136 samples, 0.30%)</title><rect x="98.9560%" y="165" width="0.3002%" height="15" fill="rgb(221,78,26)" fg:x="44832" fg:w="136"/><text x="99.2060%" y="175.50"></text></g><g><title>case3-9180c99637496113`serde_json::de::impl$9::next_element_seed&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt; &gt;,core::marker::PhantomData (132 samples, 0.29%)</title><rect x="98.9648%" y="149" width="0.2914%" height="15" fill="rgb(250,127,30)" fg:x="44836" fg:w="132"/><text x="99.2148%" y="159.50"></text></g><g><title>case3-9180c99637496113`serde_json::de::impl$7::deserialize_struct&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader (131 samples, 0.29%)</title><rect x="98.9670%" y="133" width="0.2892%" height="15" fill="rgb(230,49,44)" fg:x="44837" fg:w="131"/><text x="99.2170%" y="143.50"></text></g><g><title>case3-9180c99637496113`std::io::impl$20::next&lt;std::io::buffered::bufreader::BufReader (6 samples, 0.01%)</title><rect x="99.2429%" y="117" width="0.0132%" height="15" fill="rgb(229,67,23)" fg:x="44962" fg:w="6"/><text x="99.4929%" y="127.50"></text></g><g><title>case3-9180c99637496113`mhr_calculator::utils::parse::parse_data&lt;mhr_calculator::data::armor::BaseArmor,ref$ (138 samples, 0.30%)</title><rect x="98.9560%" y="213" width="0.3046%" height="15" fill="rgb(249,83,47)" fg:x="44832" fg:w="138"/><text x="99.2060%" y="223.50"></text></g><g><title>case3-9180c99637496113`hashbrown::map::HashMap&lt;alloc::string::String,alloc::string::String,std::collections::hash::map::RandomState,alloc::alloc::Global&gt;::insert (5 samples, 0.01%)</title><rect x="99.2628%" y="101" width="0.0110%" height="15" fill="rgb(215,43,3)" fg:x="44971" fg:w="5"/><text x="99.5128%" y="111.50"></text></g><g><title>case3-9180c99637496113`serde_json::de::impl$7::deserialize_map&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt; &gt;,serde::de::impls::impl$188::deserialize::MapVisitor (14 samples, 0.03%)</title><rect x="99.2606%" y="117" width="0.0309%" height="15" fill="rgb(238,154,13)" fg:x="44970" fg:w="14"/><text x="99.5106%" y="127.50"></text></g><g><title>case3-9180c99637496113`serde_json::de::impl$7::deserialize_string&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader (5 samples, 0.01%)</title><rect x="99.2804%" y="101" width="0.0110%" height="15" fill="rgb(219,56,2)" fg:x="44979" fg:w="5"/><text x="99.5304%" y="111.50"></text></g><g><title>case3-9180c99637496113`serde_json::de::from_reader&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;,alloc::vec::Vec (15 samples, 0.03%)</title><rect x="99.2606%" y="197" width="0.0331%" height="15" fill="rgb(233,0,4)" fg:x="44970" fg:w="15"/><text x="99.5106%" y="207.50"></text></g><g><title>case3-9180c99637496113`serde_json::de::impl$7::deserialize_seq&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt; &gt;,serde::de::impls::impl$19::deserialize::VecVisitor (15 samples, 0.03%)</title><rect x="99.2606%" y="181" width="0.0331%" height="15" fill="rgb(235,30,7)" fg:x="44970" fg:w="15"/><text x="99.5106%" y="191.50"></text></g><g><title>case3-9180c99637496113`serde::de::impls::impl$19::deserialize::impl$0::visit_seq&lt;mhr_calculator::data::deco::Decoration,serde_json::de::SeqAccess&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader (15 samples, 0.03%)</title><rect x="99.2606%" y="165" width="0.0331%" height="15" fill="rgb(250,79,13)" fg:x="44970" fg:w="15"/><text x="99.5106%" y="175.50"></text></g><g><title>case3-9180c99637496113`serde_json::de::impl$9::next_element_seed&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt; &gt;,core::marker::PhantomData (15 samples, 0.03%)</title><rect x="99.2606%" y="149" width="0.0331%" height="15" fill="rgb(211,146,34)" fg:x="44970" fg:w="15"/><text x="99.5106%" y="159.50"></text></g><g><title>case3-9180c99637496113`serde_json::de::impl$7::deserialize_struct&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader (15 samples, 0.03%)</title><rect x="99.2606%" y="133" width="0.0331%" height="15" fill="rgb(228,22,38)" fg:x="44970" fg:w="15"/><text x="99.5106%" y="143.50"></text></g><g><title>case3-9180c99637496113`mhr_calculator::utils::parse::parse_data&lt;mhr_calculator::data::deco::Decoration,ref$ (16 samples, 0.04%)</title><rect x="99.2606%" y="213" width="0.0353%" height="15" fill="rgb(235,168,5)" fg:x="44970" fg:w="16"/><text x="99.5106%" y="223.50"></text></g><g><title>case3-9180c99637496113`serde_json::read::impl$4::ignore_str&lt;std::io::buffered::bufreader::BufReader (9 samples, 0.02%)</title><rect x="99.3003%" y="101" width="0.0199%" height="15" fill="rgb(221,155,16)" fg:x="44988" fg:w="9"/><text x="99.5503%" y="111.50"></text></g><g><title>case3-9180c99637496113`serde::de::MapAccess::next_value&lt;serde_json::de::MapAccess&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader (11 samples, 0.02%)</title><rect x="99.2981%" y="117" width="0.0243%" height="15" fill="rgb(215,215,53)" fg:x="44987" fg:w="11"/><text x="99.5481%" y="127.50"></text></g><g><title>case3-9180c99637496113`serde_json::de::impl$7::deserialize_string&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader (5 samples, 0.01%)</title><rect x="99.3246%" y="101" width="0.0110%" height="15" fill="rgb(223,4,10)" fg:x="44999" fg:w="5"/><text x="99.5746%" y="111.50"></text></g><g><title>case3-9180c99637496113`serde_json::read::impl$4::parse_str&lt;std::io::buffered::bufreader::BufReader (5 samples, 0.01%)</title><rect x="99.3246%" y="85" width="0.0110%" height="15" fill="rgb(234,103,6)" fg:x="44999" fg:w="5"/><text x="99.5746%" y="95.50"></text></g><g><title>case3-9180c99637496113`serde_json::de::impl$7::deserialize_map&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt; &gt;,serde::de::impls::impl$188::deserialize::MapVisitor (7 samples, 0.02%)</title><rect x="99.3224%" y="117" width="0.0155%" height="15" fill="rgb(227,97,0)" fg:x="44998" fg:w="7"/><text x="99.5724%" y="127.50"></text></g><g><title>case3-9180c99637496113`serde::de::impls::impl$19::deserialize::impl$0::visit_seq&lt;mhr_calculator::data::skill::Skill,serde_json::de::SeqAccess&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader (20 samples, 0.04%)</title><rect x="99.2959%" y="165" width="0.0441%" height="15" fill="rgb(234,150,53)" fg:x="44986" fg:w="20"/><text x="99.5459%" y="175.50"></text></g><g><title>case3-9180c99637496113`serde_json::de::impl$9::next_element_seed&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt; &gt;,core::marker::PhantomData (19 samples, 0.04%)</title><rect x="99.2981%" y="149" width="0.0419%" height="15" fill="rgb(228,201,54)" fg:x="44987" fg:w="19"/><text x="99.5481%" y="159.50"></text></g><g><title>case3-9180c99637496113`serde_json::de::impl$7::deserialize_struct&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader (19 samples, 0.04%)</title><rect x="99.2981%" y="133" width="0.0419%" height="15" fill="rgb(222,22,37)" fg:x="44987" fg:w="19"/><text x="99.5481%" y="143.50"></text></g><g><title>case3-9180c99637496113`serde_json::de::from_reader&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt;,alloc::vec::Vec (21 samples, 0.05%)</title><rect x="99.2959%" y="197" width="0.0464%" height="15" fill="rgb(237,53,32)" fg:x="44986" fg:w="21"/><text x="99.5459%" y="207.50"></text></g><g><title>case3-9180c99637496113`serde_json::de::impl$7::deserialize_seq&lt;serde_json::read::IoRead&lt;std::io::buffered::bufreader::BufReader&lt;std::fs::File&gt; &gt;,serde::de::impls::impl$19::deserialize::VecVisitor (21 samples, 0.05%)</title><rect x="99.2959%" y="181" width="0.0464%" height="15" fill="rgb(233,25,53)" fg:x="44986" fg:w="21"/><text x="99.5459%" y="191.50"></text></g><g><title>case3-9180c99637496113`futures_util::future::poll_fn::impl$2::poll&lt;tuple$&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,mhr_calculator::data::armor::BaseArmor,std::collections::hash::map::RandomState&gt;,std::collections::hash::map::HashMap&lt;alloc::string::String,mhr_calculator::data::skill::Skill,std::collections::hash::map::RandomState&gt;,std::collections::hash::map::HashMap (183 samples, 0.40%)</title><rect x="98.9405%" y="245" width="0.4039%" height="15" fill="rgb(210,40,34)" fg:x="44825" fg:w="183"/><text x="99.1905%" y="255.50"></text></g><g><title>case3-9180c99637496113`core::future::from_generator::impl$1::poll&lt;enum$ (183 samples, 0.40%)</title><rect x="98.9405%" y="229" width="0.4039%" height="15" fill="rgb(241,220,44)" fg:x="44825" fg:w="183"/><text x="99.1905%" y="239.50"></text></g><g><title>case3-9180c99637496113`mhr_calculator::utils::parse::parse_data&lt;mhr_calculator::data::skill::Skill,ref$ (22 samples, 0.05%)</title><rect x="99.2959%" y="213" width="0.0486%" height="15" fill="rgb(235,28,35)" fg:x="44986" fg:w="22"/><text x="99.5459%" y="223.50"></text></g><g><title>case3-9180c99637496113`alloc::raw_vec::RawVec&lt;mhr_calculator::data::deco::Decoration,alloc::alloc::Global&gt;::reserve_for_push (8 samples, 0.02%)</title><rect x="99.3621%" y="229" width="0.0177%" height="15" fill="rgb(210,56,17)" fg:x="45016" fg:w="8"/><text x="99.6121%" y="239.50"></text></g><g><title>case3-9180c99637496113`alloc::raw_vec::finish_grow (8 samples, 0.02%)</title><rect x="99.3621%" y="213" width="0.0177%" height="15" fill="rgb(224,130,29)" fg:x="45016" fg:w="8"/><text x="99.6121%" y="223.50"></text></g><g><title>ntdll`RtlReAllocateHeap (7 samples, 0.02%)</title><rect x="99.3643%" y="197" width="0.0155%" height="15" fill="rgb(235,212,8)" fg:x="45017" fg:w="7"/><text x="99.6143%" y="207.50"></text></g><g><title>ntdll`RtlReAllocateHeap (7 samples, 0.02%)</title><rect x="99.3643%" y="181" width="0.0155%" height="15" fill="rgb(223,33,50)" fg:x="45017" fg:w="7"/><text x="99.6143%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (6 samples, 0.01%)</title><rect x="99.3665%" y="165" width="0.0132%" height="15" fill="rgb(219,149,13)" fg:x="45018" fg:w="6"/><text x="99.6165%" y="175.50"></text></g><g><title>VCRUNTIME140`memcpy (7 samples, 0.02%)</title><rect x="99.3798%" y="213" width="0.0155%" height="15" fill="rgb(250,156,29)" fg:x="45024" fg:w="7"/><text x="99.6298%" y="223.50"></text></g><g><title>case3-9180c99637496113`alloc::string::impl$4::clone (28 samples, 0.06%)</title><rect x="99.3798%" y="229" width="0.0618%" height="15" fill="rgb(216,193,19)" fg:x="45024" fg:w="28"/><text x="99.6298%" y="239.50"></text></g><g><title>ntdll`RtlAllocateHeap (21 samples, 0.05%)</title><rect x="99.3952%" y="213" width="0.0464%" height="15" fill="rgb(216,135,14)" fg:x="45031" fg:w="21"/><text x="99.6452%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (18 samples, 0.04%)</title><rect x="99.4018%" y="197" width="0.0397%" height="15" fill="rgb(241,47,5)" fg:x="45034" fg:w="18"/><text x="99.6518%" y="207.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (8 samples, 0.02%)</title><rect x="99.4239%" y="181" width="0.0177%" height="15" fill="rgb(233,42,35)" fg:x="45044" fg:w="8"/><text x="99.6739%" y="191.50"></text></g><g><title>case3-9180c99637496113`core::hash::BuildHasher::hash_one&lt;std::collections::hash::map::RandomState,ref$ (8 samples, 0.02%)</title><rect x="99.4703%" y="197" width="0.0177%" height="15" fill="rgb(231,13,6)" fg:x="45065" fg:w="8"/><text x="99.7203%" y="207.50"></text></g><g><title>case3-9180c99637496113`core::hash::sip::impl$5::write (7 samples, 0.02%)</title><rect x="99.4725%" y="181" width="0.0155%" height="15" fill="rgb(207,181,40)" fg:x="45066" fg:w="7"/><text x="99.7225%" y="191.50"></text></g><g><title>case3-9180c99637496113`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,alloc::string::String&gt;,alloc::alloc::Global&gt;::insert&lt;tuple$&lt;alloc::string::String,alloc::string::String&gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0 (19 samples, 0.04%)</title><rect x="99.4504%" y="229" width="0.0419%" height="15" fill="rgb(254,173,49)" fg:x="45056" fg:w="19"/><text x="99.7004%" y="239.50"></text></g><g><title>case3-9180c99637496113`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,alloc::string::String&gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;alloc::string::String,alloc::string::String&gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0 (18 samples, 0.04%)</title><rect x="99.4526%" y="213" width="0.0397%" height="15" fill="rgb(221,1,38)" fg:x="45057" fg:w="18"/><text x="99.7026%" y="223.50"></text></g><g><title>VCRUNTIME140`memcpy (5 samples, 0.01%)</title><rect x="99.5299%" y="197" width="0.0110%" height="15" fill="rgb(206,124,46)" fg:x="45092" fg:w="5"/><text x="99.7799%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (23 samples, 0.05%)</title><rect x="99.6336%" y="165" width="0.0508%" height="15" fill="rgb(249,21,11)" fg:x="45139" fg:w="23"/><text x="99.8836%" y="175.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (5 samples, 0.01%)</title><rect x="99.6844%" y="165" width="0.0110%" height="15" fill="rgb(222,201,40)" fg:x="45162" fg:w="5"/><text x="99.9344%" y="175.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (5 samples, 0.01%)</title><rect x="99.6844%" y="149" width="0.0110%" height="15" fill="rgb(235,61,29)" fg:x="45162" fg:w="5"/><text x="99.9344%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (5 samples, 0.01%)</title><rect x="99.6844%" y="133" width="0.0110%" height="15" fill="rgb(219,207,3)" fg:x="45162" fg:w="5"/><text x="99.9344%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (5 samples, 0.01%)</title><rect x="99.6844%" y="117" width="0.0110%" height="15" fill="rgb(222,56,46)" fg:x="45162" fg:w="5"/><text x="99.9344%" y="127.50"></text></g><g><title>case3-9180c99637496113`alloc::string::impl$4::clone (89 samples, 0.20%)</title><rect x="99.5210%" y="213" width="0.1964%" height="15" fill="rgb(239,76,54)" fg:x="45088" fg:w="89"/><text x="99.7710%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (77 samples, 0.17%)</title><rect x="99.5475%" y="197" width="0.1700%" height="15" fill="rgb(231,124,27)" fg:x="45100" fg:w="77"/><text x="99.7975%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (74 samples, 0.16%)</title><rect x="99.5541%" y="181" width="0.1633%" height="15" fill="rgb(249,195,6)" fg:x="45103" fg:w="74"/><text x="99.8041%" y="191.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (10 samples, 0.02%)</title><rect x="99.6954%" y="165" width="0.0221%" height="15" fill="rgb(237,174,47)" fg:x="45167" fg:w="10"/><text x="99.9454%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (17 samples, 0.04%)</title><rect x="99.7197%" y="181" width="0.0375%" height="15" fill="rgb(206,201,31)" fg:x="45178" fg:w="17"/><text x="99.9697%" y="191.50"></text></g><g><title>case3-9180c99637496113`hashbrown::raw::impl$12::clone&lt;tuple$ (121 samples, 0.27%)</title><rect x="99.4923%" y="229" width="0.2671%" height="15" fill="rgb(231,57,52)" fg:x="45075" fg:w="121"/><text x="99.7423%" y="239.50"></text></g><g><title>ntdll`RtlAllocateHeap (18 samples, 0.04%)</title><rect x="99.7197%" y="213" width="0.0397%" height="15" fill="rgb(248,177,22)" fg:x="45178" fg:w="18"/><text x="99.9697%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (18 samples, 0.04%)</title><rect x="99.7197%" y="197" width="0.0397%" height="15" fill="rgb(215,211,37)" fg:x="45178" fg:w="18"/><text x="99.9697%" y="207.50"></text></g><g><title>case3-9180c99637496113`mhr_calculator::calc::deco_combination::DecorationCombinations::new (6 samples, 0.01%)</title><rect x="99.7594%" y="229" width="0.0132%" height="15" fill="rgb(241,128,51)" fg:x="45196" fg:w="6"/><text x="100.0094%" y="239.50"></text></g><g><title>case3-9180c99637496113`mhr_calculator::data::data_manager::DataManager::extract_slot_armors (8 samples, 0.02%)</title><rect x="99.7727%" y="229" width="0.0177%" height="15" fill="rgb(227,165,31)" fg:x="45202" fg:w="8"/><text x="100.0227%" y="239.50"></text></g><g><title>case3-9180c99637496113`criterion::Criterion&lt;criterion::measurement::WallTime&gt;::bench_function (45,174 samples, 99.71%)</title><rect x="0.0905%" y="389" width="99.7108%" height="15" fill="rgb(228,167,24)" fg:x="41" fg:w="45174"/><text x="0.3405%" y="399.50">case3-9180c99637496113`criterion::Criterion&lt;criterion::measurement::WallTime&gt;::bench_function</text></g><g><title>case3-9180c99637496113`criterion::benchmark_group::BenchmarkGroup&lt;criterion::measurement::WallTime&gt;::bench_function (45,174 samples, 99.71%)</title><rect x="0.0905%" y="373" width="99.7108%" height="15" fill="rgb(228,143,12)" fg:x="41" fg:w="45174"/><text x="0.3405%" y="383.50">case3-9180c99637496113`criterion::benchmark_group::BenchmarkGroup&lt;criterion::measurement::WallTime&gt;::bench_function</text></g><g><title>case3-9180c99637496113`criterion::routine::Routine::test&lt;criterion::routine::Function&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,case3::bench::closure_env$0&gt;,tuple$&lt;&gt; &gt;,criterion::measurement::WallTime,tuple$ (45,173 samples, 99.71%)</title><rect x="0.0927%" y="357" width="99.7086%" height="15" fill="rgb(249,149,8)" fg:x="42" fg:w="45173"/><text x="0.3427%" y="367.50">case3-9180c99637496113`criterion::routine::Routine::test&lt;criterion::routine::Function&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_funct..</text></g><g><title>case3-9180c99637496113`core::iter::adapters::map::impl$2::fold&lt;f64,core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,case3::bench::closure_env$0&gt;,tuple$&lt;&gt; &gt;,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;f64,alloc::vec::spec_extend::impl$1::spec_extend::closure_env$0&lt;f64,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::impl$0::bench_function::closure_env$0&lt;criterion::measurement::WallTime,criterion::benchmark_group::BenchmarkId,case3::bench::closure_env$0&gt;,tuple$ (45,173 samples, 99.71%)</title><rect x="0.0927%" y="341" width="99.7086%" height="15" fill="rgb(243,35,44)" fg:x="42" fg:w="45173"/><text x="0.3427%" y="351.50">case3-9180c99637496113`core::iter::adapters::map::impl$2::fold&lt;f64,core::slice::iter::Iter&lt;u64&gt;,criterion::routine::impl$1::bench::closure_env$0&lt;criterion::measuremen..</text></g><g><title>case3-9180c99637496113`tokio::runtime::Runtime::block_on&lt;core::future::from_generator::GenFuture&lt;enum$ (390 samples, 0.86%)</title><rect x="98.9405%" y="325" width="0.8608%" height="15" fill="rgb(246,89,9)" fg:x="44825" fg:w="390"/><text x="99.1905%" y="335.50"></text></g><g><title>case3-9180c99637496113`tokio::runtime::scheduler::current_thread::CurrentThread::block_on&lt;core::future::from_generator::GenFuture&lt;enum$ (390 samples, 0.86%)</title><rect x="98.9405%" y="309" width="0.8608%" height="15" fill="rgb(233,213,13)" fg:x="44825" fg:w="390"/><text x="99.1905%" y="319.50"></text></g><g><title>case3-9180c99637496113`tokio::macros::scoped_tls::ScopedKey&lt;tokio::runtime::scheduler::current_thread::Context&gt;::set&lt;tokio::runtime::scheduler::current_thread::Context,tokio::runtime::scheduler::current_thread::impl$9::enter::closure_env$0&lt;tokio::runtime::scheduler::current_thread::impl$9::block_on::closure_env$0&lt;core::pin::Pin&lt;ref_mut$&lt;core::future::from_generator::GenFuture&lt;enum$&lt;case3::bench::closure$0::async_block_env$0&gt; &gt; &gt; &gt; &gt;,enum$&lt;core::option::Option&lt;mhr_calculator::data::data_manager::DataManager&gt;, 1, 18446744073709551615, Some&gt; &gt;,tuple$&lt;alloc::boxed::Box&lt;tokio::runtime::scheduler::current_thread::Core,alloc::alloc::Global&gt;,enum$&lt;core::option::Option (390 samples, 0.86%)</title><rect x="98.9405%" y="293" width="0.8608%" height="15" fill="rgb(233,141,41)" fg:x="44825" fg:w="390"/><text x="99.1905%" y="303.50"></text></g><g><title>case3-9180c99637496113`tokio::runtime::scheduler::current_thread::Context::enter&lt;enum$&lt;core::task::poll::Poll&lt;mhr_calculator::data::data_manager::DataManager&gt;, 1, 18446744073709551615, Ready&gt;,tokio::runtime::scheduler::current_thread::impl$9::block_on::closure$0::closure_env$0&lt;core::pin::Pin&lt;ref_mut$&lt;core::future::from_generator::GenFuture&lt;enum$ (390 samples, 0.86%)</title><rect x="98.9405%" y="277" width="0.8608%" height="15" fill="rgb(239,167,4)" fg:x="44825" fg:w="390"/><text x="99.1905%" y="287.50"></text></g><g><title>case3-9180c99637496113`core::future::from_generator::impl$1::poll&lt;enum$ (390 samples, 0.86%)</title><rect x="98.9405%" y="261" width="0.8608%" height="15" fill="rgb(209,217,16)" fg:x="44825" fg:w="390"/><text x="99.1905%" y="271.50"></text></g><g><title>case3-9180c99637496113`mhr_calculator::data::data_manager::DataManager::new (207 samples, 0.46%)</title><rect x="99.3444%" y="245" width="0.4569%" height="15" fill="rgb(219,88,35)" fg:x="45008" fg:w="207"/><text x="99.5944%" y="255.50"></text></g><g><title>case3-9180c99637496113`serde_json::de::from_slice (14 samples, 0.03%)</title><rect x="99.8102%" y="325" width="0.0309%" height="15" fill="rgb(220,193,23)" fg:x="45219" fg:w="14"/><text x="100.0602%" y="335.50"></text></g><g><title>case3-9180c99637496113`serde_json::de::impl$7::deserialize_struct (14 samples, 0.03%)</title><rect x="99.8102%" y="309" width="0.0309%" height="15" fill="rgb(230,90,52)" fg:x="45219" fg:w="14"/><text x="100.0602%" y="319.50"></text></g><g><title>case3-9180c99637496113`serde_json::read::impl$7::ignore_str (8 samples, 0.02%)</title><rect x="99.8234%" y="293" width="0.0177%" height="15" fill="rgb(252,106,19)" fg:x="45225" fg:w="8"/><text x="100.0734%" y="303.50"></text></g><g><title>case3-9180c99637496113`std::process::Child::wait_with_output (13 samples, 0.03%)</title><rect x="99.8411%" y="309" width="0.0287%" height="15" fill="rgb(206,74,20)" fg:x="45233" fg:w="13"/><text x="100.0911%" y="319.50"></text></g><g><title>case3-9180c99637496113`std::sys::windows::pipe::AsyncPipe::schedule_read (10 samples, 0.02%)</title><rect x="99.8477%" y="293" width="0.0221%" height="15" fill="rgb(230,138,44)" fg:x="45236" fg:w="10"/><text x="100.0977%" y="303.50"></text></g><g><title>case3-9180c99637496113`alloc::raw_vec::impl$1::reserve::do_reserve_and_handle (6 samples, 0.01%)</title><rect x="99.8565%" y="277" width="0.0132%" height="15" fill="rgb(235,182,43)" fg:x="45240" fg:w="6"/><text x="100.1065%" y="287.50"></text></g><g><title>case3-9180c99637496113`alloc::raw_vec::finish_grow (6 samples, 0.01%)</title><rect x="99.8565%" y="261" width="0.0132%" height="15" fill="rgb(242,16,51)" fg:x="45240" fg:w="6"/><text x="100.1065%" y="271.50"></text></g><g><title>ntdll`RtlReAllocateHeap (6 samples, 0.01%)</title><rect x="99.8565%" y="245" width="0.0132%" height="15" fill="rgb(248,9,4)" fg:x="45240" fg:w="6"/><text x="100.1065%" y="255.50"></text></g><g><title>ntdll`RtlReAllocateHeap (6 samples, 0.01%)</title><rect x="99.8565%" y="229" width="0.0132%" height="15" fill="rgb(210,31,22)" fg:x="45240" fg:w="6"/><text x="100.1065%" y="239.50"></text></g><g><title>ntdll`RtlReAllocateHeap (6 samples, 0.01%)</title><rect x="99.8565%" y="213" width="0.0132%" height="15" fill="rgb(239,54,39)" fg:x="45240" fg:w="6"/><text x="100.1065%" y="223.50"></text></g><g><title>KERNEL32`BaseCheckElevation (8 samples, 0.02%)</title><rect x="99.8698%" y="245" width="0.0177%" height="15" fill="rgb(230,99,41)" fg:x="45246" fg:w="8"/><text x="100.1198%" y="255.50"></text></g><g><title>KERNEL32`SortGetHandle (7 samples, 0.02%)</title><rect x="99.8941%" y="229" width="0.0155%" height="15" fill="rgb(253,106,12)" fg:x="45257" fg:w="7"/><text x="100.1441%" y="239.50"></text></g><g><title>ntdll`ZwApphelpCacheControl (6 samples, 0.01%)</title><rect x="99.8963%" y="213" width="0.0132%" height="15" fill="rgb(213,46,41)" fg:x="45258" fg:w="6"/><text x="100.1463%" y="223.50"></text></g><g><title>KERNEL32`BasepQueryAppCompat (8 samples, 0.02%)</title><rect x="99.8941%" y="245" width="0.0177%" height="15" fill="rgb(215,133,35)" fg:x="45257" fg:w="8"/><text x="100.1441%" y="255.50"></text></g><g><title>KERNEL32`CreateProcessW (25 samples, 0.06%)</title><rect x="99.8698%" y="293" width="0.0552%" height="15" fill="rgb(213,28,5)" fg:x="45246" fg:w="25"/><text x="100.1198%" y="303.50"></text></g><g><title>KERNELBASE`CreateProcessW (25 samples, 0.06%)</title><rect x="99.8698%" y="277" width="0.0552%" height="15" fill="rgb(215,77,49)" fg:x="45246" fg:w="25"/><text x="100.1198%" y="287.50"></text></g><g><title>KERNELBASE`CreateProcessInternalW (25 samples, 0.06%)</title><rect x="99.8698%" y="261" width="0.0552%" height="15" fill="rgb(248,100,22)" fg:x="45246" fg:w="25"/><text x="100.1198%" y="271.50"></text></g><g><title>ntdll`NtCreateUserProcess (5 samples, 0.01%)</title><rect x="99.9139%" y="245" width="0.0110%" height="15" fill="rgb(208,67,9)" fg:x="45266" fg:w="5"/><text x="100.1639%" y="255.50"></text></g><g><title>bcrypt`BCryptOpenAlgorithmProvider (5 samples, 0.01%)</title><rect x="99.9250%" y="229" width="0.0110%" height="15" fill="rgb(219,133,21)" fg:x="45271" fg:w="5"/><text x="100.1750%" y="239.50"></text></g><g><title>case3-9180c99637496113`std::process::Command::output (44 samples, 0.10%)</title><rect x="99.8411%" y="325" width="0.0971%" height="15" fill="rgb(246,46,29)" fg:x="45233" fg:w="44"/><text x="100.0911%" y="335.50"></text></g><g><title>case3-9180c99637496113`std::sys::windows::process::Command::spawn (31 samples, 0.07%)</title><rect x="99.8698%" y="309" width="0.0684%" height="15" fill="rgb(246,185,52)" fg:x="45246" fg:w="31"/><text x="100.1198%" y="319.50"></text></g><g><title>case3-9180c99637496113`std::sys::windows::process::Stdio::to_handle (6 samples, 0.01%)</title><rect x="99.9250%" y="293" width="0.0132%" height="15" fill="rgb(252,136,11)" fg:x="45271" fg:w="6"/><text x="100.1750%" y="303.50"></text></g><g><title>case3-9180c99637496113`std::sys::windows::pipe::anon_pipe (6 samples, 0.01%)</title><rect x="99.9250%" y="277" width="0.0132%" height="15" fill="rgb(219,138,53)" fg:x="45271" fg:w="6"/><text x="100.1750%" y="287.50"></text></g><g><title>bcrypt`BCryptGenRandom (6 samples, 0.01%)</title><rect x="99.9250%" y="261" width="0.0132%" height="15" fill="rgb(211,51,23)" fg:x="45271" fg:w="6"/><text x="100.1750%" y="271.50"></text></g><g><title>bcrypt`BCryptGenRandom (6 samples, 0.01%)</title><rect x="99.9250%" y="245" width="0.0132%" height="15" fill="rgb(247,221,28)" fg:x="45271" fg:w="6"/><text x="100.1750%" y="255.50"></text></g><g><title>case3-9180c99637496113`std::rt::lang_start::closure$0&lt;tuple$ (45,238 samples, 99.85%)</title><rect x="0.0905%" y="437" width="99.8521%" height="15" fill="rgb(251,222,45)" fg:x="41" fg:w="45238"/><text x="0.3405%" y="447.50">case3-9180c99637496113`std::rt::lang_start::closure$0&lt;tuple$</text></g><g><title>case3-9180c99637496113`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$ (45,238 samples, 99.85%)</title><rect x="0.0905%" y="421" width="99.8521%" height="15" fill="rgb(217,162,53)" fg:x="41" fg:w="45238"/><text x="0.3405%" y="431.50">case3-9180c99637496113`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$</text></g><g><title>case3-9180c99637496113`case3::main (45,238 samples, 99.85%)</title><rect x="0.0905%" y="405" width="99.8521%" height="15" fill="rgb(229,93,14)" fg:x="41" fg:w="45238"/><text x="0.3405%" y="415.50">case3-9180c99637496113`case3::main</text></g><g><title>case3-9180c99637496113`criterion::impl$3::default (60 samples, 0.13%)</title><rect x="99.8102%" y="389" width="0.1324%" height="15" fill="rgb(209,67,49)" fg:x="45219" fg:w="60"/><text x="100.0602%" y="399.50"></text></g><g><title>case3-9180c99637496113`std::sync::once::Once::call_inner (60 samples, 0.13%)</title><rect x="99.8102%" y="373" width="0.1324%" height="15" fill="rgb(213,87,29)" fg:x="45219" fg:w="60"/><text x="100.0602%" y="383.50"></text></g><g><title>case3-9180c99637496113`std::sync::once::impl$4::call_once::closure$0&lt;lazy_static::lazy::impl$0::get::closure_env$0&lt;std::path::PathBuf,std::path::PathBuf (*) (60 samples, 0.13%)</title><rect x="99.8102%" y="357" width="0.1324%" height="15" fill="rgb(205,151,52)" fg:x="45219" fg:w="60"/><text x="100.0602%" y="367.50"></text></g><g><title>case3-9180c99637496113`criterion::cargo_target_directory (60 samples, 0.13%)</title><rect x="99.8102%" y="341" width="0.1324%" height="15" fill="rgb(253,215,39)" fg:x="45219" fg:w="60"/><text x="100.0602%" y="351.50"></text></g><g><title>case3-9180c99637496113`main (45,239 samples, 99.85%)</title><rect x="0.0905%" y="469" width="99.8543%" height="15" fill="rgb(221,220,41)" fg:x="41" fg:w="45239"/><text x="0.3405%" y="479.50">case3-9180c99637496113`main</text></g><g><title>case3-9180c99637496113`std::rt::lang_start_internal (45,239 samples, 99.85%)</title><rect x="0.0905%" y="453" width="99.8543%" height="15" fill="rgb(218,133,21)" fg:x="41" fg:w="45239"/><text x="0.3405%" y="463.50">case3-9180c99637496113`std::rt::lang_start_internal</text></g><g><title>case3-9180c99637496113`__scrt_common_main_seh (45,247 samples, 99.87%)</title><rect x="0.0883%" y="485" width="99.8720%" height="15" fill="rgb(221,193,43)" fg:x="40" fg:w="45247"/><text x="0.3383%" y="495.50">case3-9180c99637496113`__scrt_common_main_seh</text></g><g><title>ucrtbase`exit (7 samples, 0.02%)</title><rect x="99.9448%" y="469" width="0.0155%" height="15" fill="rgb(240,128,52)" fg:x="45280" fg:w="7"/><text x="100.1948%" y="479.50"></text></g><g><title>ucrtbase`exit (7 samples, 0.02%)</title><rect x="99.9448%" y="453" width="0.0155%" height="15" fill="rgb(253,114,12)" fg:x="45280" fg:w="7"/><text x="100.1948%" y="463.50"></text></g><g><title>ucrtbase`mbsicmp_l (6 samples, 0.01%)</title><rect x="99.9470%" y="437" width="0.0132%" height="15" fill="rgb(215,223,47)" fg:x="45281" fg:w="6"/><text x="100.1970%" y="447.50"></text></g><g><title>ucrtbase`o_iswascii (6 samples, 0.01%)</title><rect x="99.9470%" y="421" width="0.0132%" height="15" fill="rgb(248,225,23)" fg:x="45281" fg:w="6"/><text x="100.1970%" y="431.50"></text></g><g><title>KERNELBASE`LoadLibraryExW (6 samples, 0.01%)</title><rect x="99.9470%" y="405" width="0.0132%" height="15" fill="rgb(250,108,0)" fg:x="45281" fg:w="6"/><text x="100.1970%" y="415.50"></text></g><g><title>ntdll`LdrLoadDll (6 samples, 0.01%)</title><rect x="99.9470%" y="389" width="0.0132%" height="15" fill="rgb(228,208,7)" fg:x="45281" fg:w="6"/><text x="100.1970%" y="399.50"></text></g><g><title>ntdll`RtlUnicodeToCustomCPN (6 samples, 0.01%)</title><rect x="99.9470%" y="373" width="0.0132%" height="15" fill="rgb(244,45,10)" fg:x="45281" fg:w="6"/><text x="100.1970%" y="383.50"></text></g><g><title>ntdll`RtlImageRvaToSection (6 samples, 0.01%)</title><rect x="99.9470%" y="357" width="0.0132%" height="15" fill="rgb(207,125,25)" fg:x="45281" fg:w="6"/><text x="100.1970%" y="367.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (6 samples, 0.01%)</title><rect x="99.9470%" y="341" width="0.0132%" height="15" fill="rgb(210,195,18)" fg:x="45281" fg:w="6"/><text x="100.1970%" y="351.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (6 samples, 0.01%)</title><rect x="99.9470%" y="325" width="0.0132%" height="15" fill="rgb(249,80,12)" fg:x="45281" fg:w="6"/><text x="100.1970%" y="335.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (5 samples, 0.01%)</title><rect x="99.9492%" y="309" width="0.0110%" height="15" fill="rgb(221,65,9)" fg:x="45282" fg:w="5"/><text x="100.1992%" y="319.50"></text></g><g><title>ntdll`LdrpResGetMappingSize (7 samples, 0.02%)</title><rect x="99.9625%" y="421" width="0.0155%" height="15" fill="rgb(235,49,36)" fg:x="45288" fg:w="7"/><text x="100.2125%" y="431.50"></text></g><g><title>all (45,305 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(225,32,20)" fg:x="0" fg:w="45305"/><text x="0.2500%" y="543.50"></text></g><g><title>ntdll`RtlUserThreadStart (45,268 samples, 99.92%)</title><rect x="0.0817%" y="517" width="99.9183%" height="15" fill="rgb(215,141,46)" fg:x="37" fg:w="45268"/><text x="0.3317%" y="527.50">ntdll`RtlUserThreadStart</text></g><g><title>KERNEL32`BaseThreadInitThunk (45,265 samples, 99.91%)</title><rect x="0.0883%" y="501" width="99.9117%" height="15" fill="rgb(250,160,47)" fg:x="40" fg:w="45265"/><text x="0.3383%" y="511.50">KERNEL32`BaseThreadInitThunk</text></g><g><title>ntdll`RtlClearThreadWorkOnBehalfTicket (18 samples, 0.04%)</title><rect x="99.9603%" y="485" width="0.0397%" height="15" fill="rgb(216,222,40)" fg:x="45287" fg:w="18"/><text x="100.2103%" y="495.50"></text></g><g><title>ntdll`EtwReplyNotification (18 samples, 0.04%)</title><rect x="99.9603%" y="469" width="0.0397%" height="15" fill="rgb(234,217,39)" fg:x="45287" fg:w="18"/><text x="100.2103%" y="479.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (18 samples, 0.04%)</title><rect x="99.9603%" y="453" width="0.0397%" height="15" fill="rgb(207,178,40)" fg:x="45287" fg:w="18"/><text x="100.2103%" y="463.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (18 samples, 0.04%)</title><rect x="99.9603%" y="437" width="0.0397%" height="15" fill="rgb(221,136,13)" fg:x="45287" fg:w="18"/><text x="100.2103%" y="447.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (10 samples, 0.02%)</title><rect x="99.9779%" y="421" width="0.0221%" height="15" fill="rgb(249,199,10)" fg:x="45295" fg:w="10"/><text x="100.2279%" y="431.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (7 samples, 0.02%)</title><rect x="99.9845%" y="405" width="0.0155%" height="15" fill="rgb(249,222,13)" fg:x="45298" fg:w="7"/><text x="100.2345%" y="415.50"></text></g></svg></svg>